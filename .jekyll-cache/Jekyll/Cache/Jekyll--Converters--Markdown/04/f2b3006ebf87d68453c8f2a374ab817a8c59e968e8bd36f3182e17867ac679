I"37<ul id="markdown-toc">
  <li><a href="#介绍" id="markdown-toc-介绍">介绍</a></li>
  <li><a href="#git常用命令" id="markdown-toc-git常用命令">Git常用命令</a>    <ul>
      <li><a href="#名词" id="markdown-toc-名词">名词</a></li>
      <li><a href="#新建代码库" id="markdown-toc-新建代码库">新建代码库</a></li>
      <li><a href="#配置" id="markdown-toc-配置">配置</a></li>
      <li><a href="#增加删除修改文件" id="markdown-toc-增加删除修改文件">增加、删除、修改文件</a></li>
      <li><a href="#代码提交" id="markdown-toc-代码提交">代码提交</a></li>
      <li><a href="#分支" id="markdown-toc-分支">分支</a></li>
      <li><a href="#标签" id="markdown-toc-标签">标签</a></li>
      <li><a href="#查看信息" id="markdown-toc-查看信息">查看信息</a></li>
      <li><a href="#远程操作" id="markdown-toc-远程操作">远程操作</a></li>
      <li><a href="#撤销" id="markdown-toc-撤销">撤销</a></li>
      <li><a href="#其他" id="markdown-toc-其他">其他</a></li>
    </ul>
  </li>
</ul>

<h2 id="介绍">介绍</h2>

<p>Git 常用命令。</p>

<h2 id="git常用命令">Git常用命令</h2>

<h3 id="名词">名词</h3>

<ul>
  <li>master: 默认开发分支</li>
  <li>origin: 默认远程版本库</li>
  <li>Index / Stage：暂存区</li>
  <li>Workspace：工作区</li>
  <li>Repository：仓库区（或本地仓库）</li>
  <li>Remote：远程仓库</li>
</ul>

<h3 id="新建代码库">新建代码库</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 在当前目录新建一个Git代码库</span>
git init

<span class="c"># 新建一个目录，将其初始化为Git代码库</span>
git init <span class="o">[</span>project-name]

<span class="c"># 下载一个项目和它的整个代码历史</span>
git clone <span class="o">[</span>url]
</code></pre></div></div>

<h3 id="配置">配置</h3>

<p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 显示当前的Git配置</span>
git config <span class="nt">--list</span>

<span class="c"># 编辑Git配置文件</span>
git config <span class="nt">-e</span> <span class="o">[</span><span class="nt">--global</span><span class="o">]</span>

<span class="c"># 设置提交代码时的用户信息</span>
git config <span class="o">[</span><span class="nt">--global</span><span class="o">]</span> user.name <span class="s2">"[name]"</span>

git config <span class="o">[</span><span class="nt">--global</span><span class="o">]</span> user.email <span class="s2">"[email address]"</span>

</code></pre></div></div>

<h3 id="增加删除修改文件">增加、删除、修改文件</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 查看状态</span>
git status

<span class="c"># 查看变更内容</span>
git diff

<span class="c"># 添加指定文件到暂存区</span>
git add <span class="o">[</span>file1] <span class="o">[</span>file2] ...

<span class="c"># 添加指定目录的所有文件到暂存区</span>
git add <span class="o">[</span><span class="nb">dir</span><span class="o">]</span>

<span class="c"># 添加当前目录下所有文件到暂存区</span>
git add <span class="nb">.</span>

<span class="c"># 添加每个变化钱，都会要求确认，对于同一个文件的多处变化，可以实现分次提交</span>
git add <span class="nt">-p</span>

<span class="c"># 删除工作区文件，并且将这次删除放入暂存区</span>
git <span class="nb">rm</span> <span class="o">[</span>file1] <span class="o">[</span>file2] ...

<span class="c"># 停止追踪指定文件，但该文件会保留在工作区</span>
git <span class="nb">rm</span> <span class="nt">--cached</span> <span class="o">[</span>file]

<span class="c"># 改名问你件，并且将这个改名放入暂存区</span>
git <span class="nb">mv</span> <span class="o">[</span>file-original] <span class="o">[</span><span class="nv">file</span><span class="o">=</span>rename]
</code></pre></div></div>

<h3 id="代码提交">代码提交</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 提交暂存区到仓库区</span>
git commit <span class="nt">-m</span> <span class="o">[</span>message]

<span class="c"># 提交暂存区的指定文件到仓库区</span>
git commit <span class="o">[</span>file1] <span class="o">[</span>file2] ... <span class="nt">-m</span> <span class="o">[</span>message]

<span class="c"># 提交工作区自上次commit之后的编号，直接到仓库区</span>
git commit <span class="nt">-a</span>

<span class="c"># 提交时显示所有diff信息</span>
git commit <span class="nt">-v</span>

<span class="c"># 使用一次新的commit，替代上一次提交，如果代码没有任何变化，则用来改写上一次commit的提交信息</span>
git commit <span class="nt">--amend</span> <span class="nt">-m</span> <span class="o">[</span>message]

<span class="c"># 重做上一次commit，并包括指定文件的新变化</span>
git commit <span class="nt">--amend</span> <span class="o">[</span>file1] <span class="o">[</span>file2] ...
</code></pre></div></div>

<h3 id="分支">分支</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 显示所有本地分支</span>
git branch

<span class="c"># 列出所有远程分支</span>
git branch <span class="nt">-r</span>

<span class="c"># 列出所有本地分支和远程分支</span>
git branch <span class="nt">-a</span>

<span class="c"># 新建一个分支，但依然停留在当前分支</span>
git branch <span class="o">[</span>branch-name]

<span class="c"># 新建一个分支，与指定的远程分支建立追踪关系</span>
git branch <span class="nt">--track</span> <span class="o">[</span>branch] <span class="o">[</span>remote-branch]

<span class="c"># 删除分支</span>
git branch <span class="nt">-d</span> <span class="o">[</span>branch-name]

<span class="c"># 删除远程分支</span>
git push origin <span class="nt">--delete</span> <span class="o">[</span>branch-name]
git branch <span class="nt">-dr</span> <span class="o">[</span>remote/branch]

<span class="c"># 新建一个分支，并切换到该分支</span>
git checkout <span class="nt">-b</span> <span class="o">[</span>branch]

<span class="c"># 切换到指定分支，并更新工作区</span>
git checkout <span class="o">[</span>branch-name]

<span class="c"># 切换到上一个分支</span>
git checkout -

<span class="c"># 建立追踪关系，在现有分支与指定的远程分支之间</span>
git branch <span class="nt">--set-upstream</span> <span class="o">[</span>branch] <span class="o">[</span>remote-branch]

<span class="c"># 合并指定分支到当前分支</span>
git merge <span class="o">[</span>branch]

<span class="c"># 衍合指定分支到当前分支</span>
git rebase &lt;branch&gt;

<span class="c"># 选择一个commit，合并进当前分支</span>
git cherry-pick <span class="o">[</span>commit]
</code></pre></div></div>

<h3 id="标签">标签</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 列出所有本地标签</span>
git tag

<span class="c"># 基于最新提交创建标签</span>
git tag &lt;tagname&gt;

<span class="c"># 删除标签</span>
git tag <span class="nt">-d</span> &lt;tagname&gt;

<span class="c"># 删除这些远程tag</span>
git push origin :refs/tags/[tagName]

<span class="c"># 查看tag信息</span>
git show <span class="o">[</span>tag]

<span class="c"># 提交指定tag</span>
git push <span class="o">[</span>remote] <span class="o">[</span>tag]

<span class="c"># 提交所有tag</span>
git push <span class="o">[</span>remote] <span class="nt">--tags</span>

<span class="c"># 新建一个分支，指向某个tag</span>
git checkout <span class="nt">-b</span> <span class="o">[</span>branch] <span class="o">[</span>tag]
</code></pre></div></div>

<h3 id="查看信息">查看信息</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 查看有变更的文件</span>
git status

<span class="c"># 显示当前分支的版本历史</span>
git log

<span class="c"># 显示commit历史，以及每次commit发生变更的文件</span>
git log <span class="nt">--stat</span>

<span class="c"># 搜索提交历史，根据关键字</span>
git log <span class="nt">-S</span> <span class="o">[</span>keyword]

<span class="c"># 显示某个commit之后所有变动，每个commit占据一行</span>
git log <span class="o">[</span>tag] HEAD <span class="nt">--pretty</span><span class="o">=</span>format:%s

<span class="c"># 显示某个文件的历史版本，包括文件改名</span>
git log <span class="nt">--follow</span> <span class="o">[</span>file]
git whatchanged <span class="o">[</span>file]

<span class="c"># 显示指定文件相关的每一次diff</span>
git log <span class="nt">-p</span> <span class="o">[</span>file]

<span class="c"># 显示过去5次提交</span>
git log <span class="nt">-5</span> <span class="nt">--pretty</span> <span class="nt">--oneline</span>

<span class="c"># 显示所有提交过的用户，按提交次数排序</span>
git blame <span class="o">[</span>file]

<span class="c"># 显示暂存区和工作区的差异</span>
git diff

<span class="c"># 显示暂存区和上一个commit的差异</span>
git diff <span class="nt">--cached</span> <span class="o">[</span>file]

<span class="c"># 显示工作区与当前分支最新commit之间的差异</span>
git diff HEAD

<span class="c"># 显示两次提交之间的差异</span>
git diff <span class="o">[</span>first-branch] ... <span class="o">[</span>second-branch]

<span class="c"># 显示今天你写了多少行代码</span>
git diff <span class="nt">--shortstat</span> <span class="s2">"@{0 day ago}"</span>

<span class="c"># 显示某次提交的元数据和内容变化</span>
git show <span class="o">[</span>commit]

<span class="c"># 显示某次提交时发生变化的文件</span>
git show <span class="nt">--name-only</span> <span class="o">[</span>commit]

<span class="c"># 显示某次提交时，某个文件的内容</span>
git show <span class="o">[</span>commit]:[filename]

<span class="c"># 显示当前分支的最近几次提交</span>
git reflog
</code></pre></div></div>

<h3 id="远程操作">远程操作</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 下载远程仓库的所以变动</span>
git fetch <span class="o">[</span>remote]

<span class="c"># 取回远程仓库的变化，并与本地分支合并</span>
git pull <span class="o">[</span>remote] <span class="o">[</span>branch]

<span class="c"># 显示所有远程仓库</span>
git remote <span class="nt">-v</span>

<span class="c"># 显示某个远程仓库的信息</span>
git remote show <span class="o">[</span>remote]

<span class="c"># 增加一个新的远程仓库，并命名</span>
git remote add <span class="o">[</span>shortname] <span class="o">[</span>url]

<span class="c"># 上传本地指定分支到远程仓库</span>
git push <span class="o">[</span>remote] <span class="o">[</span>branch]

<span class="c"># 强行推送当前分支到远程仓库，及时有冲突</span>
git push <span class="o">[</span>remote] <span class="nt">--force</span>

<span class="c"># 推送所以分支到远程仓库</span>
git push <span class="o">[</span>remote] <span class="nt">--all</span>
</code></pre></div></div>

<h3 id="撤销">撤销</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 撤销工作目录中所有未提交文件的修改内容</span>
git reset <span class="nt">--hard</span> HEAD

<span class="c"># 撤销指定的未提交文件的修改内容</span>
git checkout HEAD &lt;file&gt;

<span class="c"># 撤销指定的提交</span>
git rever &lt;commit&gt;

<span class="c"># 退回到前一天的版本</span>
git log <span class="nt">--before</span><span class="o">=</span><span class="s2">"1 days"</span>

<span class="c"># 恢复暂存区的指定文件到工作区</span>
git checkout <span class="o">[</span>file]

<span class="c"># 恢复某个commit的指定文件到暂存区和工作区</span>
git checkout <span class="o">[</span>commit] <span class="o">[</span>file]

<span class="c"># 恢复暂存区的所有文件到工作区</span>
git checkout <span class="nb">.</span>

<span class="c"># 重置暂存区的指定文件，与上一次commit保持一致</span>
git reset <span class="nt">--hard</span>

<span class="c"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span>
git reset <span class="o">[</span>commit]

<span class="c"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span>
git reset <span class="nt">--hard</span> <span class="o">[</span>commit]

<span class="c"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span>
git reset <span class="nt">--keep</span> <span class="o">[</span>commit]

<span class="c"># 新建一个commit，用来撤销指定commit，后者的所有变化都将被前者抵消，并且应用到当前分支</span>
git revert <span class="o">[</span>commit]

<span class="c"># 暂时将未提交的变化移除，稍后再移除</span>
git stash
git stash pop
</code></pre></div></div>

<h3 id="其他">其他</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 生成一个可供发布的压缩包</span>
git archive
</code></pre></div></div>
:ET